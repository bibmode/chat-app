import { Icon } from "@iconify/react";
import { useContext, useEffect, useState, useRef } from "react";
import Head from "next/head";
import Message from "../components/Message";
import { messages } from "../data/messages";
import { AppContext } from "../components/Layout";
import Drawer from "../components/Drawer";
import ChannelModal from "../components/ChannelModal";
import { getSession } from "next-auth/react";
import { prisma } from "../lib/prisma";
import axios from "axios";
import { useRouter } from "next/router";

export const getServerSideProps = async (ctx) => {
  const session = await getSession(ctx);
  console.log(session);

  if (!session) {
    return {
      redirect: {
        destination: "/",
        permanent: false,
      },
    };
  }

  // get channels
  const channels = await prisma.channel.findMany({
    include: {
      members: true,
    },
  });

  return {
    props: {
      channels: await JSON.parse(JSON.stringify(channels)),
    },
  };
};

export default function ChannelPage({ channels }) {
  const {
    drawer,
    setDrawer,
    drawerToggle,
    setDrawerToggle,
    modal,
    setModal,
    refreshData,
    channelIndex,
    setChannelIndex,
    creatingNewChannel,
    setCreatingNewChannel,
  } = useContext(AppContext);

  const [userInput, setUserInput] = useState("");
  const [messages, setMessages] = useState(null);
  const [loading, setLoading] = useState(false);
  const userInputField = useRef(null);

  const openDrawer = () => {
    setDrawer(true);
  };

  const addUserToChannel = async (channelId) => {
    await axios.patch("/api/user", { channelId: channelId });
  };

  const getMessages = async () => {
    setLoading(true);
    const messagesRes = await axios.get("/api/message", {
      params: { channelId: channels[channelIndex]?.id },
    });

    setMessages(messagesRes.data);
    setLoading(false);
  };

  const refreshedMessages = async () => {
    const messagesRes = await axios.get("/api/message", {
      params: { channelId: channels[channelIndex]?.id },
    });

    // console.log(messagesRes.data.length);

    await setMessages(messagesRes.data);
  };

  const handleMessageSubmit = async (e) => {
    const res = await axios.post("/api/message", {
      message: userInput,
      channelId: channels[channelIndex]?.id,
    });

    console.log(res);
    userInputField.current.value = "";
  };

  const formatDate = (dateAndTime) => {
    const date = dateAndTime.slice(0, dateAndTime.indexOf("T"));
    const time = dateAndTime.slice(dateAndTime.indexOf("T") + 1, -8);
    return `${date} at ${time}`;
  };

  // get messages every few seconds from the database
  // useEffect(() => {

  // }, []);

  // add user to welcome channel initially
  useEffect(() => {
    getMessages();
    if (creatingNewChannel) {
      const latestChannel = channels.length;
      console.log(latestChannel);
      setChannelIndex(latestChannel - 1);
      setCreatingNewChannel(false);
    }
  }, [channels]);

  useEffect(() => {
    getMessages();
  }, [channelIndex]);

  // get data every second
  useEffect(() => {
    const interval = setInterval(async () => {
      console.log("data fetch");
      !loading && refreshedMessages();
    }, 5000);
    return () => clearInterval(interval);
  }, [channelIndex]);

  return (
    <div className="lg:overflow-y-scroll lg:h-screen lg:flex scrollbar-hidden">
      <Head>
        <title>Chat App | Frontend Devs</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      {modal && <ChannelModal channels={channels} />}

      {drawer && (
        <Drawer channels={channels} addUserToChannel={addUserToChannel} />
      )}

      <div className="relative pt-16 lg:pt-0 pb-20 lg:pb-0 mx-auto bg-zinc-800 min-h-screen w-full lg:flex lg:flex-col">
        {/* top bar */}
        <div className="fixed z-30 lg:sticky text-gray-50 top-0 left-0 w-full lg:w-auto bg-zinc-800 drop-shadow-lg p-4">
          <div className="lg:container max-w-7xl flex">
            <button onClick={openDrawer} className="text-2xl lg:hidden">
              <Icon icon="charm:menu-hamburger" />
            </button>

            <h1 className="text-md font-semibold mt-0.5 pl-4 lg:pl-0 uppercase">
              {channels[channelIndex]?.name}
            </h1>
          </div>
        </div>

        {/* loading & conversation section */}
        {loading ? (
          <div className="text-blue-500 text-4xl container grid place-items-center mt-12 mb-auto">
            <Icon icon="eos-icons:loading" />
          </div>
        ) : (
          <div className="lg:mt-auto px-4 overflow-y-scroll scrollbar-hidden">
            {messages?.map((item, index) => (
              <div key={index} className="lg:container max-w-7xl">
                <Message
                  name={item.user.name}
                  image={item.user.image}
                  date={formatDate(item.createdAt)}
                  message={item.message}
                />
              </div>
            ))}
          </div>
        )}

        {/* input bar */}
        <div className="fixed lg:sticky bottom-0 left-0 w-full py-4 px-5 bg-zinc-800">
          <div className="w-full py-2 pl-5 pr-2 rounded-lg bg-zinc-600/50 flex justify-between lg:container max-w-7xl">
            <input
              className="bg-transparent outline-none border-none text-white w-full mr-4"
              type="text"
              placeholder="Type a message here"
              name="message"
              id="message-input"
              autoComplete="off"
              ref={userInputField}
              onChange={(e) => setUserInput(e.target.value)}
            />
            <button
              className="text-white text-xl bg-blue-500 w-9 h-9 rounded-lg grid place-content-center"
              disabled={!userInput.trim().length}
              onClick={(e) => handleMessageSubmit(e)}
            >
              <Icon icon="fe:paper-plane" />
            </button>
          </div>
        </div>
      </div>
    </div>
  );
}
